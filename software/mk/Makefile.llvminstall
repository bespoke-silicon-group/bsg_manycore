ifndef LLVM_DIR
    $(error Need to define LLVM_DIR)
endif

# devtoolset-8
GCCVERSION = $(shell gcc -dumpversion)
ifeq ($(shell expr $(GCCVERSION) \> 7), 1)
HOST_TOOLCHAIN ?=
$(info Using default GCCVERSION $(GCCVERSION))
else
HOST_TOOLCHAIN ?= /opt/rh/devtoolset-8/root/usr/bin/
$(info Default GCCVERSION $(GCCVERSION) is too old; using $(HOST_TOOLCHAIN))
endif

# We need cmake3. On older RHEL systems, cmake is version 2 and cmake3
# is version 3. On newer systems cmake is version3. Default to cmake3
# if it is available, and backup to cmake. If cmake is NOT version 3,
# it will fail during LLVM compilation with the appropriate warning.
ifneq (, $(shell which cmake3))
    CMAKE=$(shell which cmake3)
else ifneq (, $(shell which cmake))
    CMAKE=$(shell which cmake)
else
    $(error "Could not find cmake, or cmake3 in PATH. Please install cmake (Version 3)")
endif

# Build tool: Pick ninja over make if available
ifndef GENERATOR
  GENERATOR = 'Unix Makefiles'
  ifneq (,$(shell which ninja))
    GENERATOR = 'Ninja'
  endif
endif

llvm-install:
	mkdir -p $(LLVM_DIR)/llvm-build && mkdir -p $(LLVM_DIR)/llvm-install
	# Get LLVM sources
	cd $(LLVM_DIR) && \
    git clone https://github.com/bespoke-silicon-group/llvm-project.git ./llvm-src && \
    cd ./llvm-src && git fetch && git checkout hb-dev
	# Install only X86 and RISCV targets
	cd $(LLVM_DIR)/llvm-build \
	    && $(CMAKE) -G $(GENERATOR) -DCMAKE_BUILD_TYPE="Debug" \
      -DLLVM_ENABLE_PROJECTS="clang" \
	    -DCMAKE_INSTALL_PREFIX="$(LLVM_DIR)/llvm-install" \
	    -DCMAKE_C_COMPILER=$(HOST_TOOLCHAIN)gcc \
	    -DCMAKE_CXX_COMPILER=$(HOST_TOOLCHAIN)g++ \
	    -DLLVM_TARGETS_TO_BUILD="X86;RISCV" \
	    -DBUILD_SHARED_LIBS=True \
	    -DLLVM_USE_SPLIT_DWARF=True \
	    -DLLVM_OPTIMIZED_TABLEGEN=True \
	    ../llvm-src/llvm
	cd  $(LLVM_DIR)/llvm-build && $(CMAKE) --build . --target install -- -j $(COMPILING_THREADS)
