#########################################################
# Chip Architecture

ARCH_OP=rv32imaf


#######################################################
# BSG Manycore Machine Configuration
#
# Import configuration from BSG_MACHINE_PATH.
# BSG_MACHINE_PATH can be set in software/mk/Makefile.paths

include $(BSG_MACHINE_PATH)/Makefile.machine.include

# most be included after we get the machine parameters
include $(BSG_MANYCORE_DIR)/software/mk/Makefile.dimensions


#######################################################
# BSG Manycore ELF Configuration

# Only use vcache EVA region if disabled
BSG_ELF_OFF_CHIP_MEM ?= $(BSG_MACHINE_DRAM_INCLUDED)

# Default data section location; LOCAL=>DMEM, SHARED=>DRAM
BSG_ELF_DEFAULT_DATA_LOC ?= LOCAL

# Total addressable DRAM size
BSG_ELF_DRAM_SIZE ?= $(shell echo \
                       $(BSG_MACHINE_DRAM_BANK_SIZE_WORDS)*$(BSG_MACHINE_GLOBAL_X)*4 \
                       | bc)

# Total addressable vcache size
BSG_ELF_VCACHE_SIZE ?= $(shell echo \
                         $(BSG_MACHINE_GLOBAL_X)*$(BSG_MACHINE_VCACHE_SET)*$(BSG_MACHINE_VCACHE_WAY)*$(BSG_MACHINE_VCACHE_BLOCK_SIZE_WORDS)*4 \
                         | bc)

# EVA of stack pointer
BSG_ELF_DRAM_EVA_OFFSET = 0x80000000
ifeq ($(BSG_ELF_DEFAULT_DATA_LOC), LOCAL)
BSG_ELF_STACK_PTR ?= 0x00001ffc
else
  ifeq ($(BSG_ELF_OFF_CHIP_MEM), 1)
  BSG_ELF_STACK_PTR ?= $(shell echo $$(( $(BSG_ELF_DRAM_EVA_OFFSET) + $(BSG_ELF_DRAM_SIZE) - 4 )) )
  else
  BSG_ELF_STACK_PTR ?= $(shell echo $$(( $(BSG_ELF_DRAM_EVA_OFFSET) + $(BSG_ELF_VCACHE_SIZE) - 4 )) )
  endif
endif


#######################################################
# Paths

ifeq ($(RISCV_BIN_DIR),)
$(error RISCV_BIN_DIR not defined)
endif

RISCV_GCC     ?= $(RISCV_BIN_DIR)/riscv32-unknown-elf-gcc
RISCV_GXX     ?= $(RISCV_BIN_DIR)/riscv32-unknown-elf-g++
RISCV_ELF2HEX ?= LD_LIBRARY_PATH=$(RISCV_BIN_DIR)/../lib $(RISCV_BIN_DIR)/elf2hex
RISCV_OBJCOPY ?= $(RISCV_BIN_DIR)/riscv32-unknown-elf-objcopy
RISCV_AR      ?= $(RISCV_BIN_DIR)/riscv32-unknown-elf-ar
RISCV_SIM     ?= $(RISCV_BIN_DIR)/spike

BSG_ROM_GEN     = $(BSG_IP_CORES_DIR)/bsg_mem/bsg_ascii_to_rom.py
HEX2BIN         = $(BSG_MANYCORE_DIR)/software/py/hex2binascii.py
NBF_PY 			    = $(BSG_MANYCORE_DIR)/software/py/nbf.py
TRACE_PP_SCRIPT = $(BSG_MANYCORE_DIR)/software/py/post_process_trace.py

COMMON_SRC_DIRS = $(BSG_MANYCORE_DIR)/software/spmd/common \
                  $(BSG_MANYCORE_DIR)/software/bsg_manycore_lib

vpath %.cpp $(COMMON_SRC_DIRS)
vpath %.c $(COMMON_SRC_DIRS)
vpath %.S $(COMMON_SRC_DIRS)


# flags
OPT_LEVEL ?= -O2
RISCV_GCC_EXTRA_OPTS ?=
RISCV_GCC_OPTS  =-march=$(ARCH_OP) -static -std=gnu99 -ffast-math -fno-common -ffp-contract=off

RISCV_GCC_OPTS +=$(RISCV_GCC_EXTRA_OPTS) -I$(BSG_MANYCORE_DIR)/software/spmd/common/ -I$(BSG_MANYCORE_DIR)/software/bsg_manycore_lib
RISCV_GCC_OPTS +=-Dbsg_tiles_X=$(bsg_tiles_X) -Dbsg_tiles_Y=$(bsg_tiles_Y)
RISCV_GCC_OPTS +=-Dbsg_global_X=$(bsg_global_X) -Dbsg_global_Y=$(bsg_global_Y)
RISCV_GCC_OPTS +=-Dbsg_group_size=$(bsg_group_size)
ifeq ($(BSG_NEWLIB), 1)
  ARGC ?= 1
  ARGV ?= main

  RISCV_GCC_OPTS +=-D__bsg_newlib
  RISCV_GCC_OPTS +=-D__bsg_argc=$(ARGC)

  comma:=,
  empty:=
  space:=$(empty) $(empty)
  RISCV_GCC_OPTS +=-D__bsg_argv=\"$(subst $(space),\"$(comma)\",$(strip $(ARGV)))\"
endif

SPMD_COMMON_OBJECTS ?=

ifeq ($(BSG_NEWLIB), 1)
SPMD_COMMON_OBJECTS += lfs.o
SPMD_COMMON_OBJECTS += args.o
SPMD_COMMON_OBJECTS += bsg_newlib_intf.o

LFS_BLOCK_SIZE ?= 128
LFS_BLOCK_COUNT ?= 64

lfs.c: $(IN_FILES)
	$(RISCV_BIN_DIR)/../riscv32-unknown-elf/bin/dramfs_mklfs $(LFS_BLOCK_SIZE) $(LFS_BLOCK_COUNT) $(IN_FILES) > $@
endif

# Manycore C library archiving rule
BSG_MANYCORE_LIB_OBJS+= bsg_set_tile_x_y.o
BSG_MANYCORE_LIB_OBJS+= bsg_printf.o

BSG_MANYCORE_LIB = bsg_manycore_lib.a

CRT_OBJ ?= crt.o


ifeq ($(BSG_ELF_OFF_CHIP_MEM), 1)
  ifeq ($(BSG_ELF_DEFAULT_DATA_LOC), LOCAL)
    LINK_SCRIPT ?= $(BSG_MANYCORE_DIR)/software/spmd/common/link_dmem.ld
  else ifeq ($(BSG_ELF_DEFAULT_DATA_LOC), SHARED)
    LINK_SCRIPT ?= $(BSG_MANYCORE_DIR)/software/spmd/common/link_dram.ld
  else
    $(error Invalid BSG_ELF_DEFAULT_DATA_LOC = $(BSG_ELF_DEFAULT_DATA_LOC); Only LOCAL and SHARED are valid)
  endif
else ifeq ($(BSG_ELF_OFF_CHIP_MEM), 0)
  ifeq ($(BSG_ELF_DEFAULT_DATA_LOC), LOCAL)
    LINK_SCRIPT ?= $(BSG_MANYCORE_DIR)/software/spmd/common/link_dmem2.ld
  else ifeq ($(BSG_ELF_DEFAULT_DATA_LOC), SHARED)
    LINK_SCRIPT ?= $(BSG_MANYCORE_DIR)/software/spmd/common/link_dram2.ld
  else
    $(error Invalid BSG_ELF_DEFAULT_DATA_LOC = $(BSG_ELF_DEFAULT_DATA_LOC); Only LOCAL and SHARED are valid)
  endif
else
  $(error Invalid BSG_ELF_OFF_CHIP_MEM = $(BSG_ELF_OFF_CHIP_MEM); Only 0 and 1 are valid)
endif

RISCV_LINK_OPTS ?= 

ifneq ($(BSG_NEWLIB), 1)
  RISCV_LINK_OPTS += -nostdlib
endif

RISCV_LINK_OPTS += -march=$(ARCH_OP) -nostartfiles -ffast-math -lc -lm -lgcc -l:$(CRT_OBJ)\
                   -L $(BSG_MANYCORE_DIR)/software/spmd/common $(RISCV_LINK_EXTRA_OPTS)

RISCV_LINK_SYMS += -Wl,--defsym,bsg_group_size=$(bsg_group_size) \
                   -Wl,--defsym,_bsg_elf_dram_size=$(BSG_ELF_DRAM_SIZE) \
                   -Wl,--defsym,_bsg_elf_vcache_size=$(BSG_ELF_VCACHE_SIZE) \
                   -Wl,--defsym,_bsg_elf_stack_ptr=$(BSG_ELF_STACK_PTR) \
                   -Wl,--no-check-sections # TODO: temporary fix to solve this problem: \
https://stackoverflow.com/questions/56518056/risc-v-linker-throwing-sections-lma-overlap-error-despite-lmas-belonging-to-dif

RISCV_LINK = $(RISCV_GCC) -t -T $(LINK_SCRIPT) $(RISCV_LINK_SYMS)


ifndef CLANG
  RISCV_GCC_OPTS += -mno-fdiv
endif

# Construct C++ flags from C flags
RISCV_GXX_EXTRA_OPTS ?=
# filter out C -std flags and extra opts for C
RISCV_GXX_OPTS =  $(filter-out -std=% $(RISCV_GCC_EXTRA_OPTS), $(RISCV_GCC_OPTS)) -std=c++11
RISCV_GXX_OPTS += $(RISCV_GXX_EXTRA_OPTS)


spmd_defs = -DPREALLOCATE=0 -DHOST_DEBUG=0

ifdef CLANG
export LLVM_DIR   = /mnt/bsg/diskbits/neilryan/llvm/llvm-install
LLVM_CLANG       ?= $(LLVM_DIR)/bin/clang
LLVM_OPT         ?= $(LLVM_DIR)/bin/opt
LLVM_LLC         ?= $(LLVM_DIR)/bin/llc
PASS_DIR         ?= $(BSG_MANYCORE_DIR)/software/manycore-llvm-pass
PASS_LIB         ?= build/manycore/libManycorePass.so
RUNTIME_FNS      ?= $(BSG_MANYCORE_DIR)/software/bsg_manycore_lib/bsg_tilegroup.h

$(LLVM_DIR):
	@echo "LLVM is not installed! Follow build instructions in the TRM and \
	set LLVM_DIR in Makefile.builddefs accordingly" && exit 1

# Remove default %.o: %.c rule
%.o: %.c
%.o: %.cpp

# Emit -O0 so that loads to consecutive memory locations aren't combined
# Opt can run optimizations in any order, so it doesn't matter
%.bc: %.c $(PASS_LIB) $(LLVM_DIR) $(RUNTIME_FNS)
	$(LLVM_CLANG) $(RISCV_GCC_OPTS) $(OPT_LEVEL) $(spmd_defs) -c -emit-llvm $(INCS) $< -o $@

# do the same for C++ sources
%.bc: %.cpp $(PASS_LIB) $(LLVM_DIR) $(RUNTIME_FNS)
	$(LLVM_CLANG) $(RISCV_GXX_OPTS) $(OPT_LEVEL) $(spmd_defs) -c -emit-llvm $(INCS) $< -o $@

%.bc.pass: %.bc
	$(LLVM_OPT) -load $(PASS_LIB) -manycore $(OPT_LEVEL) $< -o $@

%.bc.s: %.bc.pass
	$(LLVM_LLC) $< -o $@

%.o: %.bc.s
	$(RISCV_GCC) $(RISCV_GCC_OPTS) $(OPT_LEVEL) -c $< -o $@


$(PASS_LIB): $(PASS_DIR)/manycore/Manycore.cpp $(LLVM_DIR)
	mkdir -p build
	cd build && cmake $(PASS_DIR) -Dbsg_group_size:INTEGER=$(bsg_group_size) && make

else
%.o: %.c
	$(RISCV_GCC) $(RISCV_GCC_OPTS) $(OPT_LEVEL) $(spmd_defs) -c $(INCS) $< -o $@ |& tee $*.comp.log

%.o: %.cpp
	$(RISCV_GXX) $(RISCV_GXX_OPTS) $(OPT_LEVEL) $(spmd_defs) -c $(INCS) $< -o $@ |& tee $*.comp.log
endif


%.o: %.S
	$(RISCV_GCC) $(RISCV_GCC_OPTS) $(OPT_LEVEL) $(spmd_defs) -D__ASSEMBLY__=1 \
		-c $(INCS) $< -o $@


$(BSG_MANYCORE_LIB): $(BSG_MANYCORE_LIB_OBJS)
	$(RISCV_AR) rcs $@ $^


# <bytes per row> <rows>
%.hex: %.riscv
	$(RISCV_ELF2HEX) $(BSG_MANYCORE_BANKS) $(BSG_MANYCORE_BANKSIZE) $< > $@

# dump the data memory content
%_dmem.mem:	%.riscv
	$(RISCV_OBJCOPY) -O verilog -j *.dmem $< $@

# dump the dram content
%_dram.mem:	%.riscv
	$(RISCV_OBJCOPY) -O verilog -j *.dram $< $@

	# Load addresses to dram start with 0x8 because NPA of dram start 
	# with 0x8. But verilog loader's readmemh cannot handle large addresses
	# starting with 0x8! Hence this changes load addresses to start with 
	# 0x0, and converting to actual NPA is handled in the verilog loader.
	sed -i 's/@8/@0/' $@

%.nbf: %.riscv
	python $(NBF_PY) $*.riscv \
		$(BSG_MACHINE_GLOBAL_X) $(BSG_MACHINE_GLOBAL_Y) \
		$(BSG_MACHINE_VCACHE_WAY) $(BSG_MACHINE_VCACHE_SET) \
		$(BSG_MACHINE_VCACHE_BLOCK_SIZE_WORDS) \
		$(BSG_MACHINE_DRAM_SIZE_WORDS) $(BSG_MACHINE_MAX_EPA_WIDTH) \
		$(bsg_tiles_org_X) $(bsg_tiles_org_Y) \
		$(bsg_tiles_X) $(bsg_tiles_Y) $(BSG_ELF_OFF_CHIP_MEM) > $*.nbf


%.bin:  %.hex
	python $(HEX2BIN) $< 32 > $@

%.dis: %.riscv
	$(RISCV_BIN_DIR)/riscv32-unknown-elf-objdump -M numeric --disassemble-all -S $<

%.spike: %.riscv
ifdef TRACE
	$(RISCV_SIM) -l --isa=$(ARCH_OP) $< 2> spike.log
else
	$(RISCV_SIM) --isa=$(ARCH_OP) $<
endif

%.S: %.c
	$(RISCV_GCC) $(RISCV_GCC_OPTS) $(spmd_defs) -S -fverbose-asm $(INCS) $< -o $@ |& tee $*.comp.log

%.S: %.cpp
	$(RISCV_GXX) $(RISCV_GXX_OPTS) $(spmd_defs) -S -fverbose-asm $(INCS) $< -o $@ |& tee $*.comp.log

