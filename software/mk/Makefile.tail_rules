%.echo:
	echo $($*)

dve:
	$(VCS_BIN)/dve -full64 -vpd vcdplus.vpd &

%.pelog: pe.log
	cat pe.log | grep '^$@' | sed 's/$@ //' > $@

cov_dve:
	$(VCS_BIN)/dve -full64 -dir *.vdb &

cov_report:
	$(VCS_BIN)/urg -full64 -map $(VCS_COV_MODULE_MAP) -report coverage/ -format both -dir *.vdb/ -log coverage.log
	cat coverage/modlist.txt

query_vcs_licenses:
	make -C $(CAD_DIR) USE_EE=$(USE_EE) -f cadenv_debug.mk $@

pp_trace:
	$(TRACE_PP_SCRIPT) vanilla.log $(PROG_NAME).riscv $(RISCV_BIN_DIR)/riscv32-unknown-elf-objdump

pp_spike_trace:
	cat spike.log | tr '\n' '@' | sed 's/@3/; /g' | sed 's/@/\n/g' > spike_pp.log

func_call_log:
	sed -n 's/.*\( pc=\(.\{8\}\) \).*/\2/p' instr.log | grep -n . > instr_pc.log
	$(BSG_MANYCORE_DIR)/software/py/func_call_log.py instr_pc.log $(PROG_NAME).riscv > $@

spike_call_log: pp_spike_trace
	sed -n 's/.* 0x.\{8\}\(.\{8\}\) .*/\1/p' spike_pp.log | grep -n . > spike_pc.log
	$(BSG_MANYCORE_DIR)/software/py/func_call_log.py spike_pc.log $(PROG_NAME).riscv > $@

CLEAN_ITEMS ?=

clean:
	-rm -rf *.o *.a *.jou *.log *.pelog *.pb bsg_manycore_io_complex_rom.v *.riscv *.wdb *.bin *.hex *.ld
	-rm -rf xsim.dir *.mem stack.info.*
	-rm -rf ./simv csrc simv.daidir ucli.key DVEfiles *.vpd *.vdb coverage* constfile.txt
	-rm -rf build/ *.bc*
	-rm -rf lfs.c *.nbf *.csv
	-rm -rf $(CLEAN_ITEMS)
